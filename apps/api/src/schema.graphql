# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  _id: String!
  description: String
  image: String
  name: String
  parent: Category
  products: [Product!]
  slug: String
}

input CategoryInsertInput {
  _id: String
  name: String
}

input CategoryQueryInput {
  _id: String
  name: String
}

input CategoryUpdateInput {
  _id: String
  name: String
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input ForgotPasswordInput {
  email: String!
}

type Inventory {
  _id: String!
  product: Product!
  purchasePrice: Float!
  quantity: Int!
  salePrice: Float!
}

input InventoryInsertInput {
  _id: String
  categories: [String!]
  name: String
  price: Float!
  properties: JSONObject
}

input InventoryQueryInput {
  _id: String
  categories: [String!]
  categories_in: [String!]
  name: String
  price: Float
  properties: JSONObject
}

input InventoryUpdateInput {
  _id: String
  categories: [String!]
  name: String
  price: Float
  properties: JSONObject
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(input: ChangePasswordInput!): String!
  deleteManyCategories(query: CategoryQueryInput): Category!
  deleteManyInventories(query: InventoryQueryInput): Inventory!
  deleteManyProducts(query: ProductQueryInput): Product!
  deleteManyUsers(where: UserQueryInput!): User!
  deleteOneCategory(query: CategoryQueryInput!): Category!
  deleteOneInventory(query: InventoryQueryInput!): Inventory!
  deleteOneProduct(query: ProductQueryInput!): Product!
  deleteOneUser(where: UserQueryUniqueInput!): User!
  forgotPassword(input: ForgotPasswordInput!): String!
  insertManyCategories(data: [CategoryInsertInput!]!): Category!
  insertManyInventories(data: [InventoryInsertInput!]!): Inventory!
  insertManyProducts(data: [ProductInsertInput!]!): Product!
  insertManyUsers(data: [UserInsertInput!]!): User!
  insertOneCategory(data: CategoryInsertInput!): Category!
  insertOneInventory(data: InventoryInsertInput!): Inventory!
  insertOneProduct(data: ProductInsertInput!): Product!
  insertOneUser(data: UserInsertInput!): User!
  login(input: LoginInput!): Token!
  resetPassword(input: ResetPasswordInput!): String!
  signup(input: SignupInput!): Token!
  updateManyCategories(data: CategoryUpdateInput!, query: CategoryQueryInput): Category!
  updateManyInventories(data: InventoryUpdateInput!, query: InventoryQueryInput): Inventory!
  updateManyProducts(data: ProductUpdateInput!, query: ProductQueryInput): Product!
  updateManyUsers(data: UpdateUserInput!, where: UserQueryUniqueInput!): User!
  updateOneCategory(data: CategoryUpdateInput!, query: CategoryQueryInput!): Category!
  updateOneInventory(data: InventoryUpdateInput!, query: InventoryQueryInput!): Inventory!
  updateOneProduct(data: ProductUpdateInput!, query: ProductQueryInput!): Product!
  updateOneUser(data: UpdateUserInput!, where: UserQueryUniqueInput!): User!
  upsertOneCategory(data: CategoryInsertInput!, query: CategoryQueryInput): Category!
  upsertOneInventory(data: InventoryInsertInput!, query: InventoryQueryInput): Inventory!
  upsertOneProduct(data: ProductInsertInput!, query: ProductQueryInput): Product!
}

type Product {
  _id: String!
  available: Boolean
  barcode: String
  categories: [Category!]
  gallery: [String!]
  image: String
  name: String
  price: Float
  productType: String!
  properties: JSONObject
  quantity: Int
  salePrice: Float
  status: String
  tags: [String!]
  unit: String
  variants: [Product!]
}

input ProductInsertInput {
  _id: String
  categories: [String!]
  name: String
  price: Float!
  properties: JSONObject
}

input ProductQueryInput {
  _id: String
  categories: [String!]
  categories_in: [String!]
  name: String
  price: Float
  properties: JSONObject
}

input ProductUpdateInput {
  _id: String
  categories: [String!]
  name: String
  price: Float
  properties: JSONObject
}

type Query {
  Role: [Role!]!
  aggregateUsers(skip: Int, take: Int, where: UserQueryInput): UserAggregate!
  categories(query: CategoryQueryInput): [Category!]!
  category(query: CategoryQueryInput!): Category!
  inventories(query: InventoryQueryInput): [Inventory!]!
  inventory(query: InventoryQueryInput!): Inventory!
  me: User!
  product(query: ProductQueryInput!): Product!
  products(query: ProductQueryInput): [Product!]!
  user(where: UserQueryUniqueInput!): User!
  users(orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserQueryInput): [User!]!
}

input ResetPasswordInput {
  password: String!
  token: String!
}

type Role {
  description: String
  name: String!
}

input SignupInput {
  email: String!
  password: String!
}

enum SortOrder {
  Asc
  Desc
}

type Token {
  accessToken: String!
  refreshToken: String!
}

input UpdateUserInput {
  address: String
  bio: String
  email: String
  fullName: String
  gender: Boolean
  id: Int
  password: String
  phone: String
  roles: [String!]
}

type User {
  address: String
  bio: String
  dateOfBirth: DateTime
  email: String!
  fullName: String
  gender: Boolean
  id: Int!
  password: String
  phone: String
  picture: String
  roles: [String!]
}

type UserAggregate {
  _count: Int
}

input UserInsertInput {
  address: String
  bio: String
  email: String!
  fullName: String
  gender: Boolean
  id: Int
  password: String!
  phone: String
  roles: [String!]
}

input UserOrderByInput {
  id: SortOrder
}

input UserQueryInput {
  address: String
  bio: String
  email: String
  fullName: String
  gender: Boolean
  id: Int
  password: String
  phone: String
  roles: [String!]
}

input UserQueryUniqueInput {
  id: Int
}